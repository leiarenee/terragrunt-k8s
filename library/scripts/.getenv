#!/bin/bash -e
#
# This script extracts environment variables from specified files such as '.env','.det.env','../other/.env'
# Author  : Leia Rénee 
# Github  : github.com/leiarenee
# Licence : MIT
# --------------------------------------------------------------------------------

# Extracts this script's current working directory
old_script_dir=$script_dir;script_dir=$(realpath "$(dirname "$BASH_SOURCE")")

# Get Repository root
repo_root=$(git rev-parse --show-toplevel)
tg_root=$(realpath "$(dirname $script_dir/../../..)")

# Source Colors
source $script_dir/colors.sh


  if [ -z $1 ] || [[ $(echo $1 | grep envrc) ]]
  then
    # Extract value of INHERIT_ENV if it exists. It will be used to set values from another repo as well
    [ -f .env ] && inherit_env=$(cat .env | grep INHERIT_ENV | sed s/INHERIT_ENV=//g)
    # .env is commited while .dev.env is ignored and used for custem overrides
    
    local_files="$tg_root/.env $tg_root/.dev.env"
    
    if [ ! -z $inherit_env ]
    then
      inherit_path=$(realpath "$repo_root/$inherit_env")
      inherit_files="$inherit_path/.env $inherit_path/.dev.env"
      
      env_file_list=$inherit_files
    fi

    env_file_list="$env_file_list $local_files"
    env_files=($env_file_list)
  else
    env_files=($@)
  fi

# Print evaluated env file list
env_file_str=${env_files[@]}
parent_path="$(realpath "$repo_root/..")/"
echo -e "${CYAN}Loading env files${NC} : ${MAGENTA}${env_file_str//"$parent_path"/.}${NC}"

# Declare environment varibles from env files
for env_file in ${env_files[@]}
do
  # If file exists
  if [ -f $env_file ]
  then
    echo -e "\n- Loading ${CYAN}$env_file${NC}"
    # Extract lines into array, using line break as seperater symbol.

    IFS=$'\n' env_vars="$(cat $env_file | sed s/\?/ƒ/g | sed s/\*/∂/g)" # ?,* makes problem hence we replace it
    
    for env_var in ${env_vars[@]}
    do
      first_char=${env_var:0:1}   # Find firs character
      if [[ $first_char != "#" ]] # If it is not a comment
      then
        subst=${env_var/=/≈}      # Use parameter expansion to replace first equal sign with its twin '≈'.
        IFS='≈'                   # Set Internal Field Seperator (IFS)
        arr=($subst)              # Make it array having 2 elements.
        key=${arr[0]}             # First is variable name.
        value=$(echo ${arr[1]} | sed s/ƒ/\?/g | sed s/∂/\*/g)    # Second is variable value, restore problematic characters
        
        if [ ! -z $value ]
        then
          export $key="$value"
          echo -e "${BLUE}$key${NC} = ${GREEN}$value${NC}"
        else
          unset $key
        fi

        IFS=$'\n'
      fi
    done
  fi
done
unset IFS
# Restore script_dir to original value if this script is sourced
[[ "$BASH_SOURCE" != "0" && ! -z $old_script_dir ]] && script_dir=$old_script_dir || true



